% The network generated by genNetworkMaskBF_CE.m only predicts speech mask.
% The function will convert the network to predict speech and noise masks
% independently. 
% Currently, this function assume there is only 1 LSTM layer for mask
% prediction. Extension needed if we use multiple LSTM layers. 
%
function [layer, para] = ConvertMaskBF2Split(layer, para)

lstm_idx = ReturnLayerIdxByName(layer, 'LSTM');
SpeechMaskLayer = layer{lstm_idx+1};
NoiseMaskLayer = layer{lstm_idx+1};     % noise mask will have negative value as speech mask
NoiseMaskLayer.W = -NoiseMaskLayer.W;   % after sigmoid, the speech and noise mask will sum to one for each time-frequency bin.
NoiseMaskLayer.b = -NoiseMaskLayer.b;

if para.topology.untieLSTM      % do not share LSTM between speech and noise mask predictions
    NoiseLSTM = layer{lstm_idx};
    NoiseLSTM.prev = -4;
    layerSplit = [layer(1:lstm_idx+2) NoiseLSTM NoiseMaskLayer layer(lstm_idx+2) layer(lstm_idx+3:end)];
    scm_idx = ReturnLayerIdxByName(layerSplit, 'SpatialCovMask');
    layerSplit{scm_idx}.name = 'SpatialCovSplitMask';
    layerSplit{scm_idx}.prev = [-4 -1 layerSplit{scm_idx}.prev(2)-3];
    bf_idx = ReturnLayerIdxByName(layerSplit, 'beamforming');
    layerSplit{bf_idx}.prev(2) = layerSplit{bf_idx}.prev(2)-3;
else                            % share LSTM between speech and noise mask predictions
    NoiseMaskLayer.prev = -3;
    layerSplit = [layer(1:lstm_idx+2) NoiseMaskLayer layer(lstm_idx+2) layer(lstm_idx+3:end)];
    scm_idx = ReturnLayerIdxByName(layerSplit, 'SpatialCovMask');
    layerSplit{scm_idx}.name = 'SpatialCovSplitMask';   % change the spatial covariance estimation from using only speech mask to using both speech and noise masks
    layerSplit{scm_idx}.prev = [-3 -1 layerSplit{scm_idx}.prev(2)-2];
    bf_idx = ReturnLayerIdxByName(layerSplit, 'beamforming');
    layerSplit{bf_idx}.prev(2) = layerSplit{bf_idx}.prev(2)-2;
end
layerSplit = FinishLayer(layerSplit);
para.cost_func.layer_idx = para.cost_func.layer_idx - max(para.cost_func.layer_idx) + length(layerSplit);
layer = layerSplit;

end
